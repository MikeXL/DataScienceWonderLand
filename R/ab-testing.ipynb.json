{"nbformat_minor": 0, "cells": [{"source": "# A/B Testing\n\n### Abstract\n\nA/B testing, as we all know it, spliting the sample into two groups - control and treatment for experiment purpose to test the _hypothesis_.\n\nIt is usually involves data collection, analysis and forming the _hypothesis_, that can be treated as the goal. With that in hand, start the experimental design. (there are two types of experiments, observational or controlled one).\n\n\n### Sample Size Estimation\nIt usually comes with these default settings\n\nConfidence Level: \n$$\\alpha = .95$$\nStatistical Power: \n$$1-\\beta = .80$$\n\nWith the above settings, the estimated sample size for two Poisson counts: \n\n$$n = 4\\div(\\sqrt{\\lambda1} - \\sqrt{\\lambda2})^2$$\n\nthe estimated sammple size for two binomial proportions: \n$$n > (1.96 * .5 \\div M)^2 - 4$$ \nor simply:  \n$$n > 4 \\div (p1 - p2)^2$$\n\nSignificant Test and Power Analysis\nCount Data\n\n\n### Statistical Test\n\nPeople say any tests would do, and people have different preference on choosing frequentist vs. bayesian. Or simply run an _glm_.\n\n#### Proportion Test (counterpart of chi-sq test)\n\n#### Count Data (counterpart to fisher?)\n\n\n[1]: https://www.optimizely.com/ab-testing/ \"A/B Testing Concept\"\n[2]: https://vwo.com/ab-testing/ \"A/B Testing Concept\"\n[3]: https://en.wikipedia.org/wiki/A/B_testing \"A/B Testing Definition\"\n[4]: http://www.evanmiller.org/ab-testing/poisson-means.html \"A/B Testing Tool\"", "cell_type": "markdown", "metadata": {}}, {"source": "#### 1. Proportion Data", "cell_type": "markdown", "metadata": {}}, {"execution_count": 1, "cell_type": "code", "source": "N = 10000\ntrial1 = 1000\nsuccess1 = 500\ntrial2 = 1000\nsuccess2 = 550\nprior.trial = 1\nprior.success = 1\n\n\n\nx <- rbeta(N, success1 + prior.success, trial1 - success1 + prior.trial)\ny <- rbeta(N, success2 + prior.success, trial2 - success2 + prior.trial)\nquantile(x, c(.025, .975))\nquantile(y, c(.025, .975))\n\nqbeta(c(.025, .975), success1 + prior.success, trial1 - success1 + prior.trial)\nqbeta(c(.025, .975), success2 + prior.success, trial2 - success2 + prior.trial)\n\n\noptions(repr.plot.width=4, repr.plot.height=3)\n\ncat(\"A in red, B in green\")\nhist(x, xlim=c(.4, .65), ylim=c(0, 700), freq=T, breaks=100, col=\"red\", main=\"a\", xlab=NULL, ylab=NULL)  # A in red\nhist(y, add=T, freq=T, breaks=100, col=\"green\", main=\"     b\", xlab=NULL, ylab=NULL) # B in green\n\ncat(\"rough power\")\nsum(y > x) /N\nsum(y > quantile(x, .975)) / N   # rough power\nsum(y > qbeta(.975, success1+1, trial1-success1+1)) /N\n\nboxplot(cbind(x, y), horizontal=T)\n", "outputs": [{"output_type": "display_data", "data": {"text/plain": "     2.5%     97.5% \n0.4691965 0.5318938 ", "text/markdown": "2.5%\n:   0.46919650510714597.5%\n:   0.531893798327938\n\n", "text/html": "<dl class=dl-horizontal>\n\t<dt>2.5%<\/dt>\n\t\t<dd>0.469196505107145<\/dd>\n\t<dt>97.5%<\/dt>\n\t\t<dd>0.531893798327938<\/dd>\n<\/dl>\n", "text/latex": "\\begin{description*}\n\\item[2.5\\%] 0.469196505107145\n\\item[97.5\\%] 0.531893798327938\n\\end{description*}\n"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "     2.5%     97.5% \n0.5190755 0.5807257 ", "text/markdown": "2.5%\n:   0.519075528335297.5%\n:   0.580725734143911\n\n", "text/html": "<dl class=dl-horizontal>\n\t<dt>2.5%<\/dt>\n\t\t<dd>0.5190755283352<\/dd>\n\t<dt>97.5%<\/dt>\n\t\t<dd>0.580725734143911<\/dd>\n<\/dl>\n", "text/latex": "\\begin{description*}\n\\item[2.5\\%] 0.5190755283352\n\\item[97.5\\%] 0.580725734143911\n\\end{description*}\n"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "[1] 0.4690631 0.5309369", "text/markdown": "1. 0.469063139881568\n2. 0.530936860118432\n\n\n", "text/html": "<ol class=list-inline>\n\t<li>0.469063139881568<\/li>\n\t<li>0.530936860118432<\/li>\n<\/ol>\n", "text/latex": "\\begin{enumerate*}\n\\item 0.469063139881568\n\\item 0.530936860118432\n\\end{enumerate*}\n"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "[1] 0.5190236 0.5805882", "text/markdown": "1. 0.519023557988087\n2. 0.580588155729193\n\n\n", "text/html": "<ol class=list-inline>\n\t<li>0.519023557988087<\/li>\n\t<li>0.580588155729193<\/li>\n<\/ol>\n", "text/latex": "\\begin{enumerate*}\n\\item 0.519023557988087\n\\item 0.580588155729193\n\\end{enumerate*}\n"}, "metadata": {}}, {"output_type": "stream", "name": "stdout", "text": "A in red, B in greenrough power"}, {"output_type": "display_data", "data": {"text/plain": "[1] 0.988", "text/markdown": "0.988", "text/html": "0.988", "text/latex": "0.988"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "[1] 0.875", "text/markdown": "0.875", "text/html": "0.875", "text/latex": "0.875"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "[1] 0.8874", "text/markdown": "0.8874", "text/html": "0.8874", "text/latex": "0.8874"}, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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"}, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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"}, "metadata": {}}], "metadata": {"collapsed": false}}, {"source": "#### 2. Count Data", "cell_type": "markdown", "metadata": {}}, {"execution_count": 2, "cell_type": "code", "source": "prior.c = 2\nprior.n = 1\n\nc1 = 20\nn1 = 1\nc2 = 25\nn2 = 1\n\n\na <- rgamma(N, c1 + prior.c, n1 + prior.n)\nb <- rgamma(N, c2 + prior.c, n2 + prior.n)\n\ncat(\"A in red, B in green\")\n\nhist(a, xlim=c(5, 40), ylim=c(0, 400), freq=T, breaks=100, col=\"red\", main=\"a\", xlab=NULL, ylab=NULL)   # A in red\npar(new=T)\nhist(b, xlim=c(5, 40), ylim=c(0, 400), freq=T, breaks=100, col=\"green\", main=\"     b\", xlab=NULL, ylab=NULL) # B in green\n\nquantile(a, c(.025, .975))\nquantile(b, c(.025, .975))\n\nqgamma(c(.025, .975), c1 + prior.c, n1 + prior.n)\nqgamma(c(.025, .975), c2 + prior.c, n2 + prior.n)\n\ncat(\"rough power\")\nsum(b > quantile(a, .975))/N  # rough power\nsum(b > qgamma(.975, c1 + prior.c, n1 + prior.n)) /N\n\nboxplot(cbind(a, b), horizontal=T)", "outputs": [{"output_type": "stream", "name": "stdout", "text": "A in red, B in green"}, {"output_type": "display_data", "data": {"text/plain": "     2.5%     97.5% \n 6.932337 15.992021 ", "text/markdown": "2.5%\n:   6.9323369789917997.5%\n:   15.9920205626851\n\n", "text/html": "<dl class=dl-horizontal>\n\t<dt>2.5%<\/dt>\n\t\t<dd>6.93233697899179<\/dd>\n\t<dt>97.5%<\/dt>\n\t\t<dd>15.9920205626851<\/dd>\n<\/dl>\n", "text/latex": "\\begin{description*}\n\\item[2.5\\%] 6.93233697899179\n\\item[97.5\\%] 15.9920205626851\n\\end{description*}\n"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "    2.5%    97.5% \n 8.88250 19.05623 ", "text/markdown": "2.5%\n:   8.8825000369428297.5%\n:   19.0562346063673\n\n", "text/html": "<dl class=dl-horizontal>\n\t<dt>2.5%<\/dt>\n\t\t<dd>8.88250003694282<\/dd>\n\t<dt>97.5%<\/dt>\n\t\t<dd>19.0562346063673<\/dd>\n<\/dl>\n", "text/latex": "\\begin{description*}\n\\item[2.5\\%] 8.88250003694282\n\\item[97.5\\%] 19.0562346063673\n\\end{description*}\n"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "[1]  6.893641 16.050365", "text/markdown": "1. 6.8936414361148\n2. 16.0503653674717\n\n\n", "text/html": "<ol class=list-inline>\n\t<li>6.8936414361148<\/li>\n\t<li>16.0503653674717<\/li>\n<\/ol>\n", "text/latex": "\\begin{enumerate*}\n\\item 6.8936414361148\n\\item 16.0503653674717\n\\end{enumerate*}\n"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "[1]  8.896585 19.048012", "text/markdown": "1. 8.89658506588239\n2. 19.0480120415625\n\n\n", "text/html": "<ol class=list-inline>\n\t<li>8.89658506588239<\/li>\n\t<li>19.0480120415625<\/li>\n<\/ol>\n", "text/latex": "\\begin{enumerate*}\n\\item 8.89658506588239\n\\item 19.0480120415625\n\\end{enumerate*}\n"}, "metadata": {}}, {"output_type": "stream", "name": "stdout", "text": "rough power"}, {"output_type": "display_data", "data": {"text/plain": "[1] 0.1651", "text/markdown": "0.1651", "text/html": "0.1651", "text/latex": "0.1651"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "[1] 0.1602", "text/markdown": "0.1602", "text/html": "0.1602", "text/latex": "0.1602"}, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": ""}, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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"}, "metadata": {}}], "metadata": {"collapsed": false}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"collapsed": true}}], "nbformat": 4, "metadata": {"kernelspec": {"display_name": "R", "name": "r", "language": "R"}, "language_info": {"mimetype": "text/x-r-source", "version": "3.1.1", "name": "R", "pygments_lexer": "r", "file_extension": ".r", "codemirror_mode": "r"}}}